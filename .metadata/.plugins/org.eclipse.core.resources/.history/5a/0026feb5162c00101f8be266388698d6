package views;

import java.util.List;

import clases_partida.Mundo;
import javafx.application.Platform;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.geometry.Rectangle2D;
import javafx.scene.Scene;
import javafx.scene.control.Accordion;
import javafx.scene.control.Label;
import javafx.scene.control.TitledPane;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.stage.Screen;
import javafx.stage.Stage;

public class DesignerView {

    private static final int FILAS = 15;
    private static final int COLUMNAS = 25;
    private static final int CASILLA_TAM = 40; // tamaño en píxeles
    private Mundo mundo;

    public DesignerView(Mundo mundo) {
        this.mundo = mundo;
    }

    public void mostrar() {
        Platform.runLater(() -> {
            Rectangle2D screenBounds = Screen.getPrimary().getVisualBounds();
            double gridWidth = COLUMNAS * CASILLA_TAM;
            double gridHeight = FILAS * CASILLA_TAM;
            double paletteWidth = 200;
            double margen = 10;

            double gridX = (screenBounds.getWidth() - (gridWidth + margen + paletteWidth)) / 2;
            double gridY = (screenBounds.getHeight() - gridHeight) / 2;

            // Crear ambas ventanas
            Stage[] referencias = new Stage[2];
            Stage cuadrícula = crearVentanaCuadricula(gridX, gridY, referencias);
            Stage paleta = crearVentanaPaleta(gridX + gridWidth + margen, gridY, referencias);

            referencias[0] = cuadrícula;
            referencias[1] = paleta;

            // Configurar cierre mutuo
            cuadrícula.setOnCloseRequest(e -> referencias[1].close());
            paleta.setOnCloseRequest(e -> referencias[0].close());
        });
    }

    private StackPane crearCasilla() {
        StackPane casilla = new StackPane();
        casilla.setPrefSize(CASILLA_TAM, CASILLA_TAM);
        casilla.setStyle("-fx-border-color: lightgray; -fx-background-color: white;");
        return casilla;
    }

    private Stage crearVentanaCuadricula(double x, double y, Stage[] referencias) {
        Stage stage = new Stage();
        stage.setTitle("Cuadrícula " + COLUMNAS + "x" + FILAS);
        stage.setResizable(false);

        GridPane grid = new GridPane();
        for (int fila = 0; fila < FILAS; fila++) {
            for (int col = 0; col < COLUMNAS; col++) {
                StackPane celda = crearCasilla();
                grid.add(celda, col, fila);
            }
        }

        Scene scene = new Scene(grid);
        stage.setScene(scene);
        stage.setX(x);
        stage.setY(y);
        stage.show();
        return stage;
    }

    private Stage crearVentanaPaleta(double x, double y, Stage[] referencias) {
        Stage stage = new Stage();
        stage.setTitle("Paleta de Elementos");
        stage.setResizable(false);

        VBox contenido = new VBox(10);
        contenido.setPadding(new Insets(10));
        contenido.setAlignment(Pos.TOP_CENTER);

        TitledPane personajesPane = crearCategoria("Personajes", mundo.getPersonajes());
        TitledPane npcsPane = crearCategoria("NPCs", mundo.getNpcs());
        TitledPane criaturasPane = crearCategoria("Criaturas", mundo.getCriaturas());
        TitledPane coloresPane = crearColoresPane();

        Accordion accordion = new Accordion(personajesPane, npcsPane, criaturasPane, coloresPane);
        contenido.getChildren().add(accordion);

        Scene scene = new Scene(contenido, 200, FILAS * CASILLA_TAM);
        stage.setScene(scene);
        stage.setX(x);
        stage.setY(y);
        stage.show();
        return stage;
    }

    private TitledPane crearCategoria(String titulo, List<?> elementos) {
        VBox contenedor = new VBox(5);
        contenedor.setPadding(new Insets(5));
        contenedor.setAlignment(Pos.TOP_CENTER);

        for (Object obj : elementos) {
            String nombre = obj.toString();
            Label label = new Label(nombre);
            label.setStyle("-fx-border-color: black; -fx-background-color: lightgray; -fx-padding: 5;");
            contenedor.getChildren().add(label);
        }

        return new TitledPane(titulo, contenedor);
    }

    private TitledPane crearColoresPane() {
        VBox contenedor = new VBox(5);
        contenedor.setPadding(new Insets(5));
        contenedor.setAlignment(Pos.TOP_CENTER);

        String[] nombres = { "Rojo", "Azul", "Verde", "Amarillo" };
        Color[] coloresFx = { Color.RED, Color.BLUE, Color.GREEN, Color.YELLOW };

        for (int i = 0; i < nombres.length; i++) {
            String nombre = nombres[i];
            Color color = coloresFx[i];
            Label boton = new Label(nombre);
            boton.setStyle("-fx-border-color: black; -fx-background-color: " + toCssColor(color) + "; -fx-padding: 5;");
            contenedor.getChildren().add(boton);
        }

        return new TitledPane("Colores", contenedor);
    }

    private String toCssColor(Color color) {
        return String.format("rgb(%d,%d,%d)", (int) (color.getRed() * 255), (int) (color.getGreen() * 255),
                (int) (color.getBlue() * 255));
    }
}
