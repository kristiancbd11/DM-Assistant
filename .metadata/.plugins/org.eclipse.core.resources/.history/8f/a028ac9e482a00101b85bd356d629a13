package views;

import clases_personaje.Personaje;
import dbhandlerCRUD.PersonajeCRUD;
import javafx.geometry.Insets;
import javafx.scene.control.*;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;

public class PersonajeView {

    public StackPane crearView(Personaje personajeOriginal) {
        Personaje copiaOriginal = new Personaje(personajeOriginal);

        VBox contenedor = new VBox(10);
        contenedor.setPadding(new Insets(20));

        Label titulo = new Label("Editar Personaje");
        titulo.setStyle("-fx-font-size: 18px; -fx-font-weight: bold;");

        TextField nombreField = new TextField(personajeOriginal.getNombre());
        TextField experienciaField = new TextField(String.valueOf(personajeOriginal.getExperiencia()));

        // Nivel (solo lectura)
        Label nivelLabel = new Label();
        nivelLabel.setText("Nivel: " + personajeOriginal.getNivel());

        // Campos de solo lectura
        Label claseLabel = new Label("Clase: " + personajeOriginal.getClase());
        Label subclaseLabel = (personajeOriginal.getSubclase() == null)
                ? new Label("Subclase: No asignada")
                : new Label("Subclase: " + personajeOriginal.getSubclase());
        Label razaLabel = new Label("Raza: " + personajeOriginal.getRaza());
        Label sexoLabel = new Label("Sexo: " + personajeOriginal.getSexo());
        Label religionLabel = new Label("Religión: " + personajeOriginal.getReligion());
        Label nacionLabel = new Label("Nación: " + personajeOriginal.getNacion());
        Label ideologiaLabel = new Label("Ideología: " + personajeOriginal.getIdeologia());

        // Botones
        Button guardarBtn = new Button("Guardar");
        Button cancelarBtn = new Button("Cancelar");

        guardarBtn.setOnAction(e -> {
            try {
                personajeOriginal.setNombre(nombreField.getText());
                personajeOriginal.setExperiencia(Integer.parseInt(experienciaField.getText()));
                personajeOriginal.setNivel(); // Recalcula nivel en base a experiencia

                // Actualiza en BD
                PersonajeCRUD crud = new PersonajeCRUD();
                crud.updatePersonaje(personajeOriginal.getIdPersonaje(), personajeOriginal);

                // Refresca vista
                nivelLabel.setText("Nivel: " + personajeOriginal.getNivel());

                new Alert(Alert.AlertType.INFORMATION, "Personaje actualizado correctamente.").showAndWait();
            } catch (NumberFormatException ex) {
                new Alert(Alert.AlertType.ERROR, "Experiencia debe ser un número válido.").showAndWait();
            }
        });

        cancelarBtn.setOnAction(e -> {
            // Restaurar campos
            nombreField.setText(copiaOriginal.getNombre());
            experienciaField.setText(String.valueOf(copiaOriginal.getExperiencia()));

            // También refresca el nivel por si se modificó visualmente
            nivelLabel.setText("Nivel: " + copiaOriginal.getNivel());
        });

        HBox botones = new HBox(10, guardarBtn, cancelarBtn);
        botones.setPadding(new Insets(10, 0, 0, 0));

        contenedor.getChildren().addAll(
                titulo,
                new Label("Nombre:"), nombreField,
                claseLabel,
                subclaseLabel,
                nivelLabel,
                new Label("Experiencia:"), experienciaField,
                razaLabel,
                sexoLabel,
                religionLabel,
                nacionLabel,
                ideologiaLabel,
                botones
        );

        StackPane pane = new StackPane(contenedor);
        pane.setStyle("-fx-background-color: #f8f8f8;");

        return pane;
    }
}
