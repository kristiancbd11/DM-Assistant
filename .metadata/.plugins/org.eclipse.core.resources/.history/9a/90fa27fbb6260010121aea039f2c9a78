package control;

import dbhandlerCRUD.NacionCRUD;
import dbhandlerCRUD.PersonajeCRUD;
import javafx.event.ActionEvent;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import views.CreationPersonajeView;
import clases_personaje.Personaje;
import clases_personaje.Raza;
import clases_personaje.Religion;
import clases_partida.Nacion;
import clases_partida.O_Nacion;
import clases_roles.Clase;
import clases_personaje.Ideologia;

import java.util.List;

public class CreationPersonajeController {
    private CreationPersonajeView view;
    private PersonajeCRUD personajeCrud;
    private NacionCRUD nacionCrud;
    private ExplorerControllerX explorerController;

    public CreationPersonajeController(CreationPersonajeView view, ExplorerControllerX explorerController) {
        this.view = view;
        this.personajeCrud = new PersonajeCRUD();
        this.explorerController = explorerController;

        // Aquí puedes agregar los eventos de los botones u otras interacciones si es necesario
        initialize();
    }

    private void initialize() {
        // Aquí añadiríamos un botón para crear el personaje, si lo necesitas
        Button btnCrearPersonaje = new Button("Crear Personaje");
        btnCrearPersonaje.setOnAction(this::crearPersonaje);
        view.getChildren().add(btnCrearPersonaje);
    }

    private void crearPersonaje(ActionEvent event) {
        // Obtener los datos del formulario
        String nombre = view.getNombreField().getText().trim();
        String sexo = view.getSexoField().getText().trim();
        int edad = view.getEdadSpinner().getValue();
        Raza raza = view.getRazaCombo().getValue();
        Religion religion = view.getReligionCombo().getValue();
        O_Nacion onacion = view.getNacionCombo().getValue();
        Nacion nacion = nacionCrud.fetchNacion(onacion.getIdNacion());
        Clase clase = view.getClaseCombo().getValue();
        List<Ideologia> ideologias = view.getIdeologiaList().getSelectionModel().getSelectedItems();

        // Validación básica de los campos
        if (nombre.isEmpty() || sexo.isEmpty() || raza == null || religion == null || nacion == null || clase == null || ideologias.isEmpty()) {
            showAlert(AlertType.WARNING, "Formulario incompleto", "Por favor, completa todos los campos.");
            return;
        }

        // Crear el personaje con los datos
        Personaje personaje = new Personaje(nombre, raza, sexo, religion, nacion, ideologias, edad, clase);

        // Guardar el personaje (aquí puedes llamar a tu CRUD para almacenar el personaje)
        boolean personajeGuardado = personajeCrud.savePersonaje(personaje);

        if (personajeGuardado) {
            showAlert(AlertType.INFORMATION, "Personaje Creado", "El personaje ha sido creado correctamente.");
        } else {
            showAlert(AlertType.ERROR, "Error al crear personaje", "Hubo un error al crear el personaje. Intenta de nuevo.");
        }
    }

    private void showAlert(AlertType alertType, String header, String content) {
        Alert alert = new Alert(alertType);
        alert.setHeaderText(header);
        alert.setContentText(content);
        alert.showAndWait();
    }
}
