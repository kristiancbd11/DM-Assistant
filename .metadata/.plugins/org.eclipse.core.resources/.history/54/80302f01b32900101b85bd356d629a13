package clases_personaje;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

import clases_estadisticas.EstadoPjJson;
import clases_estadisticas.StatCarisma;
import clases_estadisticas.StatConstitucion;
import clases_estadisticas.StatDestreza;
import clases_estadisticas.StatFuerza;
import clases_estadisticas.StatGeneral;
import clases_estadisticas.StatInteligencia;
import clases_estadisticas.StatSabiduria;
import clases_estadisticas.ConjuntoEstadisticas;
import clases_habilidades.Don;
import clases_habilidades.Hechizo;
import clases_habilidades.Rasgo;
import clases_habilidades.Talento;
import clases_habilidades.Ventaja;
import clases_objetos.Objeto;
import clases_partida.Escena;
import clases_partida.Mundo;
import clases_partida.Nacion;
import clases_partida.Ubicacion;
import clases_roles.Clase;
import clases_roles.Subclase;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.SequenceGenerator;
import jakarta.persistence.Table;
import javafx.scene.control.Spinner;

@Entity
@Table(name = "PERSONAJES")
public class Personaje {

	// DATOS ASIGNADOS MANUALMENTE:
	// Datos temáticos
	@Column(name = "nombre")
	private String nombre;

	@ManyToOne
	@JoinColumn(name = "idRaza", nullable = false)
	private Raza raza;

	@Column(name = "sexo")
	private String sexo;

	@ManyToOne
	@JoinColumn(name = "idReligion", nullable = false)
	private Religion religion;

	@ManyToOne
	@JoinColumn(name = "idNacion", nullable = false)
	private Nacion nacion;
	
	@ManyToOne
	@JoinColumn(name = "idIdeologia", nullable = false)
	private Ideologia ideologia;

	@Column(name = "edad")
	private int edad;

	// Datos de clase
	@ManyToOne
	@JoinColumn(name = "idClase", nullable = false)
	private Clase clase;
	
	@ManyToOne
	@JoinColumn(name = "idSubclase", nullable = true)
	private Subclase subclase; // Asignable pero no durante la instanciación
	
	// Datos de partida
	@ManyToMany(mappedBy = "personajes", cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.EAGER)
	private List<Escena> escenas = new ArrayList<>();
	
    @ManyToMany(mappedBy = "personajes", cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.EAGER)
	private List<Ubicacion> ubicaciones = new ArrayList<>();
    
    @ManyToMany(mappedBy = "personajes", cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.EAGER)
  	private List<Mundo> mundos = new ArrayList<>();

	// DATOS CALCULADOS AUTOMÁTICAMENTE:
	// Identificador
	@Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "personajes_gen")
	@SequenceGenerator(name = "personajes_gen", sequenceName = "personajes_seq", allocationSize = 1)
	@Column(name = "idPersonaje")
	private int idPersonaje;

	// Datos de estado
	private String estadoJson;

	// DATOS DE PROGRESO:
	// Datos de habilidades, capacidades y posesiones
	@Column(name = "oro")
	private int oro = 30;

	@Column(name = "experiencia")
	private int experiencia = 0;

	@Column(name = "nivel")
	private int nivel = 1;

	// 0: No competente || 1: Competente
	// Bit 1: Armas diestras
	// Bit 2: Armas de duelo
	// Bit 3: Armas de guerra
	// Bit 4: Armas a dos manos
	// Bit 5: Armas a distancia
	// Bit 6: Escudos
	// Bit 7: Puños
	// Bit 8: Guadañas
	@Column(name = "armas")
	private byte[] competenciaArma;

	// 0: No competente || 1: Competente
	// Bit 1: Armaduras ligeras
	// Bit 2: Armaduras medias
	// Bit 3: Armaduras pesadas
	@Column(name = "armaduras")
	private byte[] competenciaArmadura;

	// Todos estos datos se obtendrán por JDBC en lugar de Hibernate
	@ManyToMany(cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.EAGER)
	@JoinTable(name = "TALENTOS_PERSONAJES", joinColumns = @JoinColumn(name = "idPersonaje"), inverseJoinColumns = @JoinColumn(name = "idTalento"))
	private List<Talento> listaTalentos;

	@ManyToMany(cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.EAGER)
	@JoinTable(name = "DONES_PERSONAJES", joinColumns = @JoinColumn(name = "idPersonaje"), inverseJoinColumns = @JoinColumn(name = "idDon"))
	private List<Don> listaDones;

	@ManyToMany(cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.EAGER)
	@JoinTable(name = "HECHIZOS_PERSONAJES", joinColumns = @JoinColumn(name = "idPersonaje"), inverseJoinColumns = @JoinColumn(name = "idHechizo"))
	private List<Hechizo> listaHechizos;

	@ManyToMany(cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.EAGER)
	@JoinTable(name = "VENTAJAS_PERSONAJES", joinColumns = @JoinColumn(name = "idPersonaje"), inverseJoinColumns = @JoinColumn(name = "idVentaja"))
	private List<Ventaja> listaVentajas;

	@ManyToMany(cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.EAGER)
	@JoinTable(name = "RASGOS_PERSONAJES", joinColumns = @JoinColumn(name = "idPersonaje"), inverseJoinColumns = @JoinColumn(name = "idRasgo"))
	private List<Rasgo> listaRasgos;

	@ManyToMany(cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.EAGER)
	@JoinTable(name = "EQUIPO_PERSONAJE", joinColumns = @JoinColumn(name = "idPersonaje"), inverseJoinColumns = @JoinColumn(name = "idObjeto"))
	private List<Objeto> equipacion;

	@ManyToMany(cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.EAGER)
	@JoinTable(name = "INVENTARIO_PERSONAJE", joinColumns = @JoinColumn(name = "idPersonaje"), inverseJoinColumns = @JoinColumn(name = "idObjeto"))
	private List<Objeto> inventario;

	// Funciones:

	// CONSTRUCTOR HIBERNATE
	public Personaje() {
	}

	// CONSTRUCTOR
	public Personaje(String nombre, Raza raza, String sexo, Religion religion, Nacion nacion, Ideologia ideologia,
			int edad, Clase clase) {
		this.nombre = nombre;
		this.raza = raza;
		this.sexo = sexo;
		this.religion = religion;
		this.nacion = nacion;
		this.ideologia = ideologia;
		this.edad = edad;
		this.clase = clase;
		this.competenciaArma = clase.getCompetenciaArma();
		this.competenciaArmadura = clase.getCompetenciaArmadura();
	}
	
	// CONSTRUCTOR COPIA
	public Personaje(Personaje original) {
	    this.nombre = original.nombre;
	    this.raza = original.raza;
	    this.sexo = original.sexo;
	    this.religion = original.religion;
	    this.nacion = original.nacion;
	    this.ideologia = original.ideologia;
	    this.edad = original.edad;
	    this.clase = original.clase;
	    this.subclase = original.subclase;

	    this.estadoJson = original.estadoJson;

	    this.oro = original.oro;
	    this.experiencia = original.experiencia;
	    this.nivel = original.nivel;

	    this.competenciaArma = original.competenciaArma != null ? original.competenciaArma.clone() : null;
	    this.competenciaArmadura = original.competenciaArmadura != null ? original.competenciaArmadura.clone() : null;

	    this.listaTalentos = new ArrayList<>(original.listaTalentos);
	    this.listaDones = new ArrayList<>(original.listaDones);
	    this.listaHechizos = new ArrayList<>(original.listaHechizos);
	    this.listaVentajas = new ArrayList<>(original.listaVentajas);
	    this.listaRasgos = new ArrayList<>(original.listaRasgos);
	    this.equipacion = new ArrayList<>(original.equipacion);
	    this.inventario = new ArrayList<>(original.inventario);

	    this.escenas = new ArrayList<>(original.escenas);
	    this.ubicaciones = new ArrayList<>(original.ubicaciones);
	    this.mundos = new ArrayList<>(original.mundos);
	}
	
	public void setAllStats(Map<String, List<Spinner<Integer>>> subatributosSpinners) {
		Scanner sc = new Scanner(System.in);
		int n1 = 0;
		int n2 = 0;
		int n3 = 0;
		int n4 = 0;
		int n5 = 0;
		int n6 = 0;
		String stat = "";

		// Parametros:
		// Salud | Iniciativa | Aura | Movimiento | Dado de ataque
		StatGeneral statGen = new StatGeneral(
				clase.getArquetipo().getConstitucion() + raza.getArquetipo().getConstitucion(),
				clase.getArquetipo().getIniciatva() + raza.getArquetipo().getIniciatva(),
				clase.getArquetipo().getAura() + raza.getArquetipo().getAura(),
				clase.getArquetipo().getMovimiento() + raza.getArquetipo().getMovimiento(), clase.getDado());

		// FUERZA:
		// Impacto | Destrozo | Carga | Levantamiento | Vigor | Atletismo
		stat = "FUERZA";
		n1 = subatributosSpinners.get(stat).get(0).getValue();
		n2 = subatributosSpinners.get(stat).get(1).getValue();
		n3 = subatributosSpinners.get(stat).get(2).getValue();
		n4 = subatributosSpinners.get(stat).get(3).getValue();
		n5 = subatributosSpinners.get(stat).get(4).getValue();
		n6 = subatributosSpinners.get(stat).get(5).getValue();
		StatFuerza statFue = new StatFuerza(n1, n2, n3, n4, n5, n6);

		stat = "CONSTITUCIÓN";
		n1 = subatributosSpinners.get(stat).get(0).getValue();
		n2 = subatributosSpinners.get(stat).get(1).getValue();
		n3 = subatributosSpinners.get(stat).get(2).getValue();
		n4 = subatributosSpinners.get(stat).get(3).getValue();
		n5 = subatributosSpinners.get(stat).get(4).getValue();
		n6 = subatributosSpinners.get(stat).get(5).getValue();
		StatConstitucion statCon = new StatConstitucion(n1, n2, n3, n4, n5, n6);

		stat = "DESTREZA";
		n1 = subatributosSpinners.get(stat).get(0).getValue();
		n2 = subatributosSpinners.get(stat).get(1).getValue();
		n3 = subatributosSpinners.get(stat).get(2).getValue();
		n4 = subatributosSpinners.get(stat).get(3).getValue();
		n5 = subatributosSpinners.get(stat).get(4).getValue();
		n6 = subatributosSpinners.get(stat).get(5).getValue();
		StatDestreza statDes = new StatDestreza(n1, n2, n3, n4, n5, n6);

		stat = "INTELIGENCIA";
		n1 = subatributosSpinners.get(stat).get(0).getValue();
		n2 = subatributosSpinners.get(stat).get(1).getValue();
		n3 = subatributosSpinners.get(stat).get(2).getValue();
		n4 = subatributosSpinners.get(stat).get(3).getValue();
		n5 = subatributosSpinners.get(stat).get(4).getValue();
		n6 = subatributosSpinners.get(stat).get(5).getValue();
		StatInteligencia statInte = new StatInteligencia(n1, n2, n3, n4, n5, n6);

		stat = "SABIDURÍA";
		n1 = subatributosSpinners.get(stat).get(0).getValue();
		n2 = subatributosSpinners.get(stat).get(1).getValue();
		n3 = subatributosSpinners.get(stat).get(2).getValue();
		n4 = subatributosSpinners.get(stat).get(3).getValue();
		n5 = subatributosSpinners.get(stat).get(4).getValue();
		n6 = subatributosSpinners.get(stat).get(5).getValue();
		StatSabiduria statSab = new StatSabiduria(n1, n2, n3, n4, n5, n6);

		stat = "CARISMA";
		n1 = subatributosSpinners.get(stat).get(0).getValue();
		n2 = subatributosSpinners.get(stat).get(1).getValue();
		n3 = subatributosSpinners.get(stat).get(2).getValue();
		n4 = subatributosSpinners.get(stat).get(3).getValue();
		n5 = subatributosSpinners.get(stat).get(4).getValue();
		n6 = subatributosSpinners.get(stat).get(5).getValue();
		StatCarisma statCar = new StatCarisma(n1, n2, n3, n4, n5, n6);

		ConjuntoEstadisticas stats = new ConjuntoEstadisticas(statGen, statFue, statCon, statDes, statInte, statSab,
				statCar);
		EstadoPjJson pjj = new EstadoPjJson(stats);
		this.estadoJson = pjj.generarJson();

	}

	public void sufrirEstados(boolean global) {
	}

	public static int calcularNivel(int experiencia) {
        if (experiencia < 20) {
            return 1;
        }

        int nivel = 2;
        int experienciaNecesaria = 20;
        int incremento = 10;

        while (experiencia >= experienciaNecesaria) {
            nivel++;
            experienciaNecesaria += incremento;
            incremento += 5;
        }

        return nivel - 1; // El bucle sale cuando se pasa, así que restamos 1
    }

	public void perderTurno() {
		// Gestionar aquí los casos en los que se pierde el turno del jugador
	}

	// Getters y setters
	public String getNombre() {
		return nombre;
	}

	public void setNombre(String nombre) {
		this.nombre = nombre;
	}

	public Raza getRaza() {
		return raza;
	}

	public void setRaza(Raza raza) {
		this.raza = raza;
	}

	public String getSexo() {
		return sexo;
	}

	public void setSexo(String sexo) {
		this.sexo = sexo;
	}

	public Religion getReligion() {
		return religion;
	}

	public void setReligion(Religion religion) {
		this.religion = religion;
	}

	public Nacion getNacion() {
		return nacion;
	}

	public void setNacion(Nacion nacion) {
		this.nacion = nacion;
	}

	public Ideologia getIdeologia() {
		return ideologia;
	}

	public void setIdeologia(Ideologia ideologia) {
		this.ideologia = ideologia;
	}

	public int getEdad() {
		return edad;
	}

	public void setEdad(int edad) {
		this.edad = edad;
	}

	public Clase getClase() {
		return clase;
	}

	public void setClase(Clase clase) {
		this.clase = clase;
	}

	public Subclase getSubclase() {
		return subclase;
	}

	public void setSubclase(Subclase subclase) {
		this.subclase = subclase;
	}

	public int getIdPersonaje() {
		return idPersonaje;
	}

	public void setIdPersonaje(int idPersonaje) {
		this.idPersonaje = idPersonaje;
	}

	public String getEstadoJson() {
		return estadoJson;
	}

	public void setEstadoJson(String estadoJson) {
		this.estadoJson = estadoJson;
	}

	public int getOro() {
		return oro;
	}

	public void setOro(int oro) {
		this.oro = oro;
	}

	public int getExperiencia() {
		return experiencia;
	}

	public void setExperiencia(int experiencia) {
		calcularNivel(experiencia);
		this.experiencia = experiencia;
	}

	public int getNivel() {
		return nivel;
	}

	public byte[] getCompetenciaArma() {
		return competenciaArma;
	}

	public void setCompetenciaArma(byte[] competenciaArma) {
		this.competenciaArma = competenciaArma;
	}

	public byte[] getCompetenciaArmadura() {
		return competenciaArmadura;
	}

	public void setCompetenciaArmadura(byte[] competenciaArmadura) {
		this.competenciaArmadura = competenciaArmadura;
	}

	public List<Talento> getListaTalentos() {
		return listaTalentos;
	}

	public void setListaTalentos(List<Talento> listaTalentos) {
		this.listaTalentos = listaTalentos;
	}

	public List<Don> getListaDones() {
		return listaDones;
	}

	public void setListaDones(List<Don> listaDones) {
		this.listaDones = listaDones;
	}

	public List<Hechizo> getListaHechizos() {
		return listaHechizos;
	}

	public void setListaHechizos(List<Hechizo> listaHechizos) {
		this.listaHechizos = listaHechizos;
	}

	public List<Ventaja> getListaVentajas() {
		return listaVentajas;
	}

	public void setListaVentajas(List<Ventaja> listaVentajas) {
		this.listaVentajas = listaVentajas;
	}

	public List<Rasgo> getListaRasgos() {
		return listaRasgos;
	}

	public void setListaRasgos(List<Rasgo> listaRasgos) {
		this.listaRasgos = listaRasgos;
	}

	public List<Objeto> getEquipacion() {
		return equipacion;
	}

	public void setEquipacion(List<Objeto> equipacion) {
		this.equipacion = equipacion;
	}

	public List<Objeto> getInventario() {
		return inventario;
	}

	public void setInventario(List<Objeto> inventario) {
		this.inventario = inventario;
	}

	public List<Escena> getEscenas() {
		return escenas;
	}

	public void setEscenas(List<Escena> escenas) {
		this.escenas = escenas;
	}
	
	public void addEscena(Escena escena) {
		this.escenas.add(escena);
	}

	public List<Ubicacion> getUbicaciones() {
		return ubicaciones;
	}

	public void setUbicaciones(List<Ubicacion> ubicaciones) {
		this.ubicaciones = ubicaciones;
	}
	
	public void addUbicacion(Ubicacion ubicacion) {
		this.ubicaciones.add(ubicacion);
	}

	public List<Mundo> getMundos() {
		return mundos;
	}

	public void setMundos(List<Mundo> mundos) {
		this.mundos = mundos;
	}
	
	public void addMundo(Mundo mundo) {
		this.mundos.add(mundo);
	}
	
	public void removeMundo(Mundo mundo) {
		mundos.remove(mundo);
	}

	@Override
	public String toString() {
		return nombre;
	}
	
}
