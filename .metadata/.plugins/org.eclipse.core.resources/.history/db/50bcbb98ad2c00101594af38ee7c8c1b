package designerView;

import clases_partida.Mundo;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Accordion;
import javafx.scene.control.Label;
import javafx.scene.control.TitledPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PaletaView {

	private final Mundo mundo;
	private final TableroView tableroView;
	private final Map<String, Object> objetosPorNombre = new HashMap<>()
	private CategoriaPaleta paletaPj;
	private CategoriaPaleta paletaNpc;
	private CategoriaPaleta paletaCriatura;

	public PaletaView(Mundo mundo, TableroView tableroView) {
		this.mundo = mundo;
		this.tableroView = tableroView;
	}

	public Stage mostrar(double x, double y, double alto) {
		Stage stage = new Stage();
		stage.setTitle("Paleta de Elementos");
		stage.setResizable(false);

		VBox contenido = new VBox(10);
		contenido.setPadding(new Insets(10));
		contenido.setAlignment(Pos.TOP_CENTER);

		// Crear categor√≠as
		paletaPj = new CategoriaPaleta("Personajes", mundo.getPersonajes());
		paletaNpc = new CategoriaPaleta("NPCs", mundo.getNpcs());
		paletaCriatura = new CategoriaPaleta("Criaturas", mundo.getCriaturas());

		Accordion accordion = new Accordion(paletaPj.getTitledPane(), paletaNpc.getTitledPane(),
				paletaCriatura.getTitledPane());

		GridPane paletaColores = crearPaletaColores();

		contenido.getChildren().addAll(accordion, paletaColores);

		Scene scene = new Scene(contenido, 200, alto);
		stage.setScene(scene);
		stage.setX(x);
		stage.setY(y);
		stage.show();
		return stage;
	}

	private GridPane crearPaletaColores() {
		GridPane grid = new GridPane();
		grid.setHgap(5);
		grid.setVgap(5);
		grid.setPadding(new Insets(10));
		Color[] colores = { Color.RED, Color.BLUE, Color.GREEN, Color.YELLOW, Color.ORANGE, Color.PURPLE, Color.BROWN,
				Color.GRAY };

		for (int i = 0; i < colores.length; i++) {
			Rectangle rect = new Rectangle(40, 40, colores[i]);
			grid.add(rect, i % 4, i / 4);
		}

		return grid;
	}

	public CategoriaPaleta getPaletaPj() {
		return paletaPj;
	}

	public CategoriaPaleta getPaletaNpc() {
		return paletaNpc;
	}

	public CategoriaPaleta getPaletaCriatura() {
		return paletaCriatura;
	}
}