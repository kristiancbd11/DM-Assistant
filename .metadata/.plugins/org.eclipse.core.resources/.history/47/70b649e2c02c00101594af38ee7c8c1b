package designerView;

import javafx.geometry.Point2D;
import javafx.scene.Scene;
import javafx.scene.control.ContextMenu;
import javafx.scene.control.Label;
import javafx.scene.control.MenuItem;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.TransferMode;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

import java.util.HashMap;
import java.util.Map;

public class TableroView {

    private final int filas;
    private final int columnas;
    private final int tamano;

    private GridPane grid;
    private final Map<Point2D, CasillaEstado> estadoCasillas = new HashMap<>();
    private DropListener dropListener;

    public TableroView(int filas, int columnas, int tamano) {
        this.filas = filas;
        this.columnas = columnas;
        this.tamano = tamano;
    }

    public Stage crearVentana(double x, double y) {
        grid = new GridPane();

        for (int fila = 0; fila < filas; fila++) {
            for (int col = 0; col < columnas; col++) {
                StackPane casilla = new StackPane();
                casilla.setPrefSize(tamano, tamano);
                casilla.setStyle("-fx-border-color: lightgray; -fx-background-color: white;");

                Point2D posicion = new Point2D(col, fila);
                estadoCasillas.put(posicion, new CasillaEstado(casilla));

                grid.add(casilla, col, fila);

                int finalCol = col;
                int finalFila = fila;

                casilla.setOnDragOver(event -> {
                    if (event.getGestureSource() != casilla && !estaOcupada(finalCol, finalFila)) {
                        event.acceptTransferModes(TransferMode.MOVE);
                    }
                    event.consume();
                });

                casilla.setOnDragDropped(event -> {
                	String nombre = event.getDragboard().getString();
                	if (nombre != null && !estaOcupada(finalCol, finalFila)) {
                	    Point2D origen = buscarPosicionPorNombre(nombre);
                	    Object elemento;

                	    if (origen != null) {
                	        // El objeto ya estaba en el tablero → moverlo
                	        CasillaEstado estadoOrigen = estadoCasillas.get(origen);
                	        elemento = estadoOrigen.getElemento();

                	        estadoOrigen.setElemento(null);
                	        estadoOrigen.getCasilla().getChildren().clear();
                	    } else {
                	        // El objeto viene desde fuera → usar solo el nombre
                	        // IMPORTANTE: Debes adaptar esto para crear una instancia real si es necesario
                	        elemento = nombre; // si no hay clase con getNombre(), será solo texto
                	    }

                	    colocarElemento(finalCol, finalFila, elemento);

                	    if (dropListener != null) {
                	        dropListener.onElementoColocado(nombre);
                	    }
                	}

                    event.setDropCompleted(true);
                    event.consume();
                });
            }
        }

        Stage stage = new Stage();
        stage.setTitle("Cuadrícula");
        stage.setScene(new Scene(grid));
        stage.setX(x);
        stage.setY(y);
        stage.setResizable(false);
        stage.show();
        return stage;
    }

    public GridPane getGrid() {
        return grid;
    }

    public CasillaEstado getEstadoCasilla(int col, int fila) {
        return estadoCasillas.get(new Point2D(col, fila));
    }

    public void colocarElemento(int col, int fila, Object elemento) {
        Point2D posicion = new Point2D(col, fila);
        CasillaEstado estado = estadoCasillas.get(posicion);
        if (estado == null || estado.estaOcupada()) return;

        estado.setElemento(elemento);

        // Visual: agregar imagen + nombre
        StackPane casilla = estado.getCasilla();
        casilla.getChildren().clear();

        ImageView imagen = new ImageView(new Image(getClass().getResourceAsStream("/tablero/default.png")));
        imagen.setFitWidth(tamano);
        imagen.setFitHeight(tamano);

        String nombre = obtenerNombreDesdeObjeto(elemento);
        Label label = new Label(nombre);
        label.setStyle("-fx-background-color: rgba(255,255,255,0.7); -fx-padding: 2px;");

        casilla.getChildren().addAll(imagen, label);

        // Habilitar arrastre desde el tablero
        casilla.setOnDragDetected(event -> {
            var db = casilla.startDragAndDrop(TransferMode.MOVE);
            var content = new javafx.scene.input.ClipboardContent();
            content.putString(nombre);
            db.setContent(content);
            db.setDragView(casilla.snapshot(null, null));
            event.consume();
        });
        
     // Menú contextual para eliminar
        MenuItem eliminarItem = new MenuItem("Eliminar");
        eliminarItem.setOnAction(e -> {
            quitarElemento(col, fila);

            // Obtener ID y categoría del elemento
            try {
                int id = (int) elemento.getClass().getMethod("getId").invoke(elemento);
                String categoria = (String) elemento.getClass().getMethod("getCategoria").invoke(elemento);

                // Notificar al listener si está definido
                if (dropListener instanceof ExtendedDropListener listener) {
                    listener.onElementoEliminado(categoria, id);
                }
            } catch (Exception ex) {
                System.err.println("No se pudo obtener ID o categoría del elemento: " + ex.getMessage());
            }
        });

        ContextMenu contextMenu = new ContextMenu(eliminarItem);

        casilla.setOnContextMenuRequested(event -> {
            contextMenu.show(casilla, event.getScreenX(), event.getScreenY());
        });

    }

    private String obtenerNombreDesdeObjeto(Object obj) {
        try {
            var method = obj.getClass().getMethod("getNombre");
            return (String) method.invoke(obj);
        } catch (Exception e) {
            return obj.toString();
        }
    }

    private Point2D buscarPosicionPorNombre(String nombre) {
        for (Map.Entry<Point2D, CasillaEstado> entry : estadoCasillas.entrySet()) {
            Object elemento = entry.getValue().getElemento();
            if (elemento != null) {
                String nombreElemento = obtenerNombreDesdeObjeto(elemento);
                if (nombre.equals(nombreElemento)) {
                    return entry.getKey();
                }
            }
        }
        return null;
    }

    public void quitarElemento(int col, int fila) {
        Point2D posicion = new Point2D(col, fila);
        CasillaEstado estado = estadoCasillas.get(posicion);
        if (estado != null) {
            estado.setElemento(null);
            estado.getCasilla().getChildren().clear();
        }
    }

    public boolean estaOcupada(int col, int fila) {
        CasillaEstado estado = estadoCasillas.get(new Point2D(col, fila));
        return estado != null && estado.estaOcupada();
    }

    public static class CasillaEstado {
        private final StackPane casilla;
        private Object elemento;

        public CasillaEstado(StackPane casilla) {
            this.casilla = casilla;
        }

        public boolean estaOcupada() {
            return elemento != null;
        }

        public Object getElemento() {
            return elemento;
        }

        public void setElemento(Object elemento) {
            this.elemento = elemento;
        }

        public StackPane getCasilla() {
            return casilla;
        }
    }

    public interface DropListener {
        void onElementoColocado(String nombreElemento);
    }

    public void setDropListener(DropListener listener) {
        this.dropListener = listener;
    }
    
    public interface ExtendedDropListener extends TableroView.DropListener {
        void onElementoEliminado(String categoria, int id);
    }

}
