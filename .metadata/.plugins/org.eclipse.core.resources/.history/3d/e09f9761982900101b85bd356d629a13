package control;

import dbhandlerCRUD.NacionCRUD;
import dbhandlerCRUD.PersonajeCRUD;
import javafx.event.ActionEvent;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.Spinner;
import javafx.stage.Stage;
import views.CreationPersonajeView;
import clases_personaje.Personaje;
import clases_personaje.Raza;
import clases_personaje.Religion;
import clases_partida.Mundo;
import clases_partida.Nacion;
import clases_partida.O_Nacion;
import clases_roles.Clase;
import clases_personaje.Ideologia;

import java.util.List;
import java.util.Map;

public class CreationPersonajeController {
	private Stage window;
	private CreationPersonajeView view;
	private PersonajeCRUD personajeCrud;
	private NacionCRUD nacionCrud;
	private ExplorerController explorerController;
	private Mundo mundo;
	private boolean npc;

	public CreationPersonajeController(Stage window, CreationPersonajeView view, ExplorerController explorerController,
			Mundo mundo, boolean npc) {
		this.window = window;
		this.view = view;
		this.personajeCrud = new PersonajeCRUD();
		this.nacionCrud = new NacionCRUD();
		this.explorerController = explorerController;
		this.mundo = mundo;
		this.npc = npc;

		// Inicializar eventos de los botones
		initialize();
	}

	private void initialize() {
	    view.getBtnCrear().setOnAction(this::crearPersonaje);
	    view.getBtnCancelar().setOnAction(this::cancelarCreacion);

	    view.getRazaCombo().setOnAction(e -> {
	        actualizarAtributosPrincipales();
	        aplicarRestriccionesSpinners(); // <- añadir aquí también si los valores cambian
	    });

	    view.getClaseCombo().setOnAction(e -> {
	        actualizarAtributosPrincipales();
	        aplicarRestriccionesSpinners(); // <- y aquí también
	    });

	    aplicarRestriccionesSpinners(); // <- llamada clave
	}


	private void crearPersonaje(ActionEvent event) {
		// Obtener los datos del formulario
		String nombre = view.getNombreField().getText().trim();
		String sexo = view.getSexoField().getText().trim();
		int edad = view.getEdadSpinner().getValue();
		Raza raza = view.getRazaCombo().getValue();
		Religion religion = view.getReligionCombo().getValue();
		O_Nacion onacion = view.getNacionCombo().getValue();
		Nacion nacion = nacionCrud.fetchNacion(onacion.getIdNacion());
		Clase clase = view.getClaseCombo().getValue();
		Ideologia ideologia = view.getIdeologiaCombo().getValue();

		// Validación de los campos
		if (nombre.isEmpty() || sexo.isEmpty() || raza == null || religion == null || nacion == null || clase == null
				|| ideologia == null) {
			showAlert(AlertType.WARNING, "Formulario incompleto", "Por favor, completa todos los campos.");
			return;
		}

		// Validar que todos los puntos de atributos estén asignados
		for (String atributo : view.getSubatributosSpinners().keySet()) {
			List<Spinner<Integer>> spinners = view.getSubatributosSpinners().get(atributo);
			int suma = spinners.stream().mapToInt(Spinner::getValue).sum();
			int max = Integer.parseInt(view.getAtributosPrincipalesLabels().get(atributo).getText());

			if (suma < max) {
				showAlert(AlertType.WARNING, "Distribución incompleta",
						"Aún tienes puntos por asignar en " + atributo + ". Por favor, distribúyelos todos.");
				return;
			}
		}

		// Crear el personaje con los datos proporcionados
		if (npc) {
			Personaje personaje = new Personaje(nombre, raza, sexo, religion, nacion, ideologia, edad, clase);
			personaje.setAllStats(view.getSubatributosSpinners());
			mundo.addNpc(personaje);

			if (personajeCrud.savePersonaje(personaje)) {
				explorerController.refreshTreeView();
				showAlert(AlertType.INFORMATION, "Personaje Creado", "El personaje ha sido creado correctamente.");
			} else {
				showAlert(AlertType.ERROR, "Error al crear personaje",
						"Hubo un error al crear el personaje. Intenta de nuevo.");
			}

		} else {
			Personaje personaje = new Personaje(nombre, raza, sexo, religion, nacion, ideologia, edad, clase);
			personaje.setAllStats(view.getSubatributosSpinners());
			mundo.addPersonaje(personaje);

			// Guardar el personaje
			// Mostrar alertas según el resultado
			if (personajeCrud.savePersonaje(personaje)) {
				explorerController.refreshTreeView();
				showAlert(AlertType.INFORMATION, "Personaje Creado", "El personaje ha sido creado correctamente.");
			} else {
				showAlert(AlertType.ERROR, "Error al crear personaje",
						"Hubo un error al crear el personaje. Intenta de nuevo.");
			}
		}

		// Cerrar la ventana de creación
		window.close();
	}

	private void cancelarCreacion(ActionEvent event) {
		// Cerrar la vista actual (ventana de creación)
		Stage stage = (Stage) view.getScene().getWindow();
		stage.close();
	}

	private void showAlert(AlertType alertType, String header, String content) {
		Alert alert = new Alert(alertType);
		alert.setHeaderText(header);
		alert.setContentText(content);
		alert.showAndWait();
	}

	private void actualizarAtributosPrincipales() {
		Raza raza = view.getRazaCombo().getValue();
		Clase clase = view.getClaseCombo().getValue();

		if (raza == null || clase == null)
			return;

		// Obtener los valores de cada atributo desde Arquetipo
		int fuerza = raza.getArquetipo().getFuerza() + clase.getArquetipo().getFuerza();
		int constitucion = raza.getArquetipo().getConstitucion() + clase.getArquetipo().getConstitucion();
		int destreza = raza.getArquetipo().getDestreza() + clase.getArquetipo().getDestreza();
		int inteligencia = raza.getArquetipo().getInteligencia() + clase.getArquetipo().getInteligencia();
		int carisma = raza.getArquetipo().getCarisma() + clase.getArquetipo().getCarisma();
		int sabiduria = raza.getArquetipo().getSabiduria() + clase.getArquetipo().getSabiduria();

		// Mostrar en los labels
		view.getAtributosPrincipalesLabels().get("FUERZA").setText(String.valueOf(fuerza));
		view.getAtributosPrincipalesLabels().get("CONSTITUCIÓN").setText(String.valueOf(constitucion));
		view.getAtributosPrincipalesLabels().get("DESTREZA").setText(String.valueOf(destreza));
		view.getAtributosPrincipalesLabels().get("INTELIGENCIA").setText(String.valueOf(inteligencia));
		view.getAtributosPrincipalesLabels().get("CARISMA").setText(String.valueOf(carisma));
		view.getAtributosPrincipalesLabels().get("SABIDURÍA").setText(String.valueOf(sabiduria));
	}

	private void aplicarRestriccionesSpinners() {
		Map<String, List<Spinner<Integer>>> spinnersPorAtributo = view.getSubatributosSpinners();
		Map<String, Label> valoresPrincipales = view.getAtributosPrincipalesLabels();

		for (String atributo : spinnersPorAtributo.keySet()) {
			List<Spinner<Integer>> spinners = spinnersPorAtributo.get(atributo);
			Label valorLabel = valoresPrincipales.get(atributo);

			for (Spinner<Integer> spinner : spinners) {
				spinner.valueProperty().addListener((obs, oldVal, newVal) -> {
					int max = Integer.parseInt(valorLabel.getText());
					int sumaActual = spinners.stream().mapToInt(Spinner::getValue).sum();

					// Si se supera el máximo, revertir el cambio
					if (sumaActual > max) {
						spinner.getValueFactory().setValue(oldVal);
					}
				});
			}
		}
	}

}
